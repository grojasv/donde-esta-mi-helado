---
// Import global styles with Tailwind CSS
import '../styles/global.css';
---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content="Track your ice cream flavors easily - D√≥nde Est√° Mi Helado?" />
		<title>D√≥nde Est√° Mi Helado?</title>
	</head>
	<body class="bg-gradient-to-br from-blue-50 to-pink-50 min-h-screen">
		<!-- Main container with mobile-first design -->
		<div class="container mx-auto px-4 py-6 max-w-md">
			<!-- App header -->
			<header class="text-center mb-8">
				<h1 class="text-3xl font-bold text-gray-800 mb-2">
					üç¶ D√≥nde Est√° Mi Helado?
				</h1>
				<p class="text-gray-600 text-sm">
					No te olvides de tus sabores favoritos
				</p>
			</header>

			<!-- Main content area - Ice cream tracking interface -->
			<main>
				<div class="bg-white rounded-xl shadow-lg p-6">
					<!-- Instructions -->
					<div class="mb-6 text-center">
						<p class="text-gray-600 text-sm">
							Escribe el sabor de cada helado en el campo correspondiente
						</p>
					</div>

					<!-- Ice cream containers grid -->
					<div class="space-y-4">
						<!-- Container 1 - Grey with A -->
						<div class="flex items-center gap-4 p-3 bg-gray-50 rounded-lg border border-gray-200">
							<div class="flex-shrink-0">
								<div class="w-16 h-16 bg-gray-300 rounded-lg flex items-center justify-center shadow-sm">
									<div class="w-12 h-10 bg-gray-400 rounded-t-lg relative flex items-center justify-center">
										<span class="text-white font-bold text-lg">A</span>
									</div>
								</div>
							</div>
							<div class="flex-1">
								<input 
									id="flavor-A"
									type="text" 
									placeholder="¬øQu√© sabor es?"
									data-container="A"
									class="w-full px-4 py-2 text-gray-800 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent text-base min-h-[44px] flavor-input"
								/>
							</div>
						</div>

						<!-- Container 2 - Grey with B -->
						<div class="flex items-center gap-4 p-3 bg-gray-50 rounded-lg border border-gray-200">
							<div class="flex-shrink-0">
								<div class="w-16 h-16 bg-gray-300 rounded-lg flex items-center justify-center shadow-sm">
									<div class="w-12 h-10 bg-gray-400 rounded-t-lg relative flex items-center justify-center">
										<span class="text-white font-bold text-lg">B</span>
									</div>
								</div>
							</div>
							<div class="flex-1">
								<input 
									id="flavor-B"
									type="text" 
									placeholder="¬øQu√© sabor es?"
									data-container="B"
									class="w-full px-4 py-2 text-gray-800 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent text-base min-h-[44px] flavor-input"
								/>
							</div>
						</div>

						<!-- Container 3 - Grey with C -->
						<div class="flex items-center gap-4 p-3 bg-gray-50 rounded-lg border border-gray-200">
							<div class="flex-shrink-0">
								<div class="w-16 h-16 bg-gray-300 rounded-lg flex items-center justify-center shadow-sm">
									<div class="w-12 h-10 bg-gray-400 rounded-t-lg relative flex items-center justify-center">
										<span class="text-white font-bold text-lg">C</span>
									</div>
								</div>
							</div>
							<div class="flex-1">
								<input 
									id="flavor-C"
									type="text" 
									placeholder="¬øQu√© sabor es?"
									data-container="C"
									class="w-full px-4 py-2 text-gray-800 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent text-base min-h-[44px] flavor-input"
								/>
							</div>
						</div>

						<!-- Container 4 - Plain Green -->
						<div class="flex items-center gap-4 p-3 bg-green-50 rounded-lg border border-green-100">
							<div class="flex-shrink-0">
								<div class="w-16 h-16 bg-green-200 rounded-lg flex items-center justify-center shadow-sm">
									<div class="w-12 h-10 bg-green-500 rounded-t-lg relative">
										<!-- Plain green cover, no decorations -->
									</div>
								</div>
							</div>
							<div class="flex-1">
								<input 
									id="flavor-4"
									type="text" 
									placeholder="¬øQu√© sabor es?"
									data-container="4"
									class="w-full px-4 py-2 text-gray-800 bg-white border border-green-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-300 focus:border-transparent text-base min-h-[44px] flavor-input"
								/>
							</div>
						</div>

						<!-- Container 5 - Plain Turquoise -->
						<div class="flex items-center gap-4 p-3 bg-cyan-50 rounded-lg border border-cyan-100">
							<div class="flex-shrink-0">
								<div class="w-16 h-16 bg-cyan-200 rounded-lg flex items-center justify-center shadow-sm">
									<div class="w-12 h-10 bg-cyan-500 rounded-t-lg relative">
										<!-- Plain turquoise cover, no decorations -->
									</div>
								</div>
							</div>
							<div class="flex-1">
								<input 
									id="flavor-5"
									type="text" 
									placeholder="¬øQu√© sabor es?"
									data-container="5"
									class="w-full px-4 py-2 text-gray-800 bg-white border border-cyan-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-300 focus:border-transparent text-base min-h-[44px] flavor-input"
								/>
							</div>
						</div>

						<!-- Container 6 - Plain Pink -->
						<div class="flex items-center gap-4 p-3 bg-pink-50 rounded-lg border border-pink-100">
							<div class="flex-shrink-0">
								<div class="w-16 h-16 bg-pink-200 rounded-lg flex items-center justify-center shadow-sm">
									<div class="w-12 h-10 bg-pink-500 rounded-t-lg relative">
										<!-- Plain pink cover, no decorations -->
									</div>
								</div>
							</div>
							<div class="flex-1">
								<input 
									id="flavor-6"
									type="text" 
									placeholder="¬øQu√© sabor es?"
									data-container="6"
									class="w-full px-4 py-2 text-gray-800 bg-white border border-pink-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-300 focus:border-transparent text-base min-h-[44px] flavor-input"
								/>
							</div>
						</div>

						<!-- Container 7 - Plain Light Grey -->
						<div class="flex items-center gap-4 p-3 bg-gray-50 rounded-lg border border-gray-100">
							<div class="flex-shrink-0">
								<div class="w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center shadow-sm">
									<div class="w-12 h-10 bg-gray-300 rounded-t-lg relative">
										<!-- Plain light grey cover, no decorations -->
									</div>
								</div>
							</div>
							<div class="flex-1">
								<input 
									id="flavor-7"
									type="text" 
									placeholder="¬øQu√© sabor es?"
									data-container="7"
									class="w-full px-4 py-2 text-gray-800 bg-white border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-300 focus:border-transparent text-base min-h-[44px] flavor-input"
								/>
							</div>
						</div>
					</div>

					<!-- Status message -->
					<div class="mt-6 text-center">
						<p id="save-status" class="text-xs text-gray-400">
							Los cambios se guardar√°n autom√°ticamente
						</p>
					</div>
				</div>
			</main>
		</div>

		<!-- Client-side JavaScript for localStorage functionality -->
		<script>
			// Storage key for localStorage
			const STORAGE_KEY = 'donde-esta-mi-helado-flavors';

			// Function to load saved flavors from localStorage
			function loadFlavors() {
				try {
					const savedFlavors = localStorage.getItem(STORAGE_KEY);
					if (savedFlavors) {
						const flavors = JSON.parse(savedFlavors);
						
						// Load each saved flavor into its corresponding input
						Object.keys(flavors).forEach(containerId => {
							const input = document.getElementById(`flavor-${containerId}`);
							if (input && flavors[containerId]) {
								input.value = flavors[containerId];
							}
						});
						
						console.log('‚úÖ Flavors loaded from localStorage');
					}
				} catch (error) {
					console.error('‚ùå Error loading flavors:', error);
					// Clear corrupted data
					localStorage.removeItem(STORAGE_KEY);
				}
			}

			// Function to save flavors to localStorage
			function saveFlavors() {
				try {
					const flavors = {};
					const inputs = document.querySelectorAll('.flavor-input');
					
					inputs.forEach(input => {
						const containerId = input.dataset.container;
						const value = input.value.trim();
						if (containerId && value) {
							flavors[containerId] = value;
						}
					});
					
					localStorage.setItem(STORAGE_KEY, JSON.stringify(flavors));
					
					// Show save confirmation
					const status = document.getElementById('save-status');
					if (status) {
						status.textContent = '‚úÖ Guardado autom√°ticamente';
						status.className = 'text-xs text-green-500';
						
						// Reset status message after 2 seconds
						setTimeout(() => {
							status.textContent = 'Los cambios se guardar√°n autom√°ticamente';
							status.className = 'text-xs text-gray-400';
						}, 2000);
					}
					
					console.log('‚úÖ Flavors saved to localStorage');
				} catch (error) {
					console.error('‚ùå Error saving flavors:', error);
					
					// Show error message
					const status = document.getElementById('save-status');
					if (status) {
						status.textContent = '‚ùå Error al guardar';
						status.className = 'text-xs text-red-500';
						
						setTimeout(() => {
							status.textContent = 'Los cambios se guardar√°n autom√°ticamente';
							status.className = 'text-xs text-gray-400';
						}, 3000);
					}
				}
			}

			// Debounce function to avoid too frequent saves
			function debounce(func, wait) {
				let timeout;
				return function executedFunction(...args) {
					const later = () => {
						clearTimeout(timeout);
						func(...args);
					};
					clearTimeout(timeout);
					timeout = setTimeout(later, wait);
				};
			}

			// Debounced save function (saves 500ms after user stops typing)
			const debouncedSave = debounce(saveFlavors, 500);

			// Initialize the app when DOM is loaded
			document.addEventListener('DOMContentLoaded', function() {
				// Load existing flavors
				loadFlavors();
				
				// Add event listeners to all flavor inputs
				const inputs = document.querySelectorAll('.flavor-input');
				inputs.forEach(input => {
					// Save on input (typing)
					input.addEventListener('input', debouncedSave);
					
					// Save immediately on blur (when user leaves the field)
					input.addEventListener('blur', saveFlavors);
				});
				
				console.log('üç¶ D√≥nde Est√° Mi Helado? initialized with localStorage');
			});

			// Save data before page unload (backup)
			window.addEventListener('beforeunload', saveFlavors);
		</script>
	</body>
</html>
